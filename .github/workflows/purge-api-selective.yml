name: Purge API tokens (pending and/or unmatched)
on:
  workflow_dispatch:
    inputs:
      purge_pending:
        description: "Delete tokens with status=pending"
        required: true
        default: "true"
        type: choice
        options: ["true","false"]
      purge_unmatched:
        description: "Delete active tokens with no tok:open:<open_id>"
        required: true
        default: "true"
        type: choice
        options: ["true","false"]
      dry_run:
        description: "Dry run (preview only)"
        required: true
        default: "true"
        type: choice
        options: ["true","false"]

jobs:
  purge:
    runs-on: ubuntu-latest
    env:
      CLOUDFLARE_API_TOKEN:  ${{ secrets.CF_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      KV_NS_ID:              ${{ secrets.KV_NS_ID_TOKENS }}
      DO_PENDING:            ${{ github.event.inputs.purge_pending }}
      DO_UNMATCHED:          ${{ github.event.inputs.purge_unmatched }}
      DRY_RUN:               ${{ github.event.inputs.dry_run }}
    steps:
      - uses: actions/setup-node@v4
        with: { node-version: 20 }

      - name: Wrangler version
        run: npx wrangler@latest --version

      - name: Scan and (maybe) delete
        shell: bash
        run: |
          set -euo pipefail
          echo "Namespace: $KV_NS_ID"
          echo "Options: pending=$DO_PENDING, unmatched=$DO_UNMATCHED, dry_run=$DRY_RUN"

          api_keys=$(npx wrangler@latest kv key list \
            --namespace-id "$KV_NS_ID" \
            --prefix "api:" | jq -r '.[].name')

          if [ -z "${api_keys:-}" ]; then
            echo "No api:* keys found."
            exit 0
          fi

          to_delete=""

          while IFS= read -r key; do
            [ -z "$key" ] && continue
            val=$(npx wrangler@latest kv key get "$key" --namespace-id "$KV_NS_ID" || true)
            [ -z "$val" ] && continue

            status=$(echo "$val" | jq -r '.status // empty')
            open_id=$(echo "$val" | jq -r '.open_id // empty')

            # pending
            if [ "$DO_PENDING" = "true" ] && [ "$status" = "pending" ]; then
              to_delete+="$key"$'\n'
              continue
            fi

            # unmatched active
            if [ "$DO_UNMATCHED" = "true" ] && [ "$status" = "active" ] && [ -n "$open_id" ]; then
              tok_key="tok:open:$open_id"
              tok_val=$(npx wrangler@latest kv key get "$tok_key" --namespace-id "$KV_NS_ID" || true)
              if [ -z "$tok_val" ]; then
                to_delete+="$key"$'\n'
              fi
            fi
          done <<< "$api_keys"

          if [ -z "${to_delete:-}" ]; then
            echo "Nothing to delete under the given criteria."
            exit 0
          fi

          echo "Keys to delete:"
          printf '%s\n' "$to_delete"

          if [ "$DRY_RUN" = "true" ]; then
            echo "Dry run: not deleting."
            exit 0
          fi

          echo "Deletingâ€¦"
          while IFS= read -r key; do
            [ -z "$key" ] && continue
            npx wrangler@latest kv key delete "$key" --namespace-id "$KV_NS_ID"
          done <<< "$to_delete"

          echo "Done."